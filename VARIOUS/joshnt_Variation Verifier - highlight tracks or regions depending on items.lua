-- @description Variation Verfier
-- @version 1.0
-- @author Joshnt
-- @about
--    Marks/ Colors/ Hides Tracks if different than given number of items
--    Useful for checking number of Variations of multiple files after dynamic splitting them
--    
--    User-Inputs:
--    Wanted Items Per Track: provide the number which the number of items on a track should match/ be lower/ larger than
--    Math. Comparison: insert different mathematical comparison symbols (allowed: =, <, > and /=, != or ~= for not equal to - or written out as words)
--    Operation with correct Tracks: write "Color", "Select", "Hide", "Delete" or "Nothing" - or first letter of those words
--    Operation with wrong Tracks: write "Color", "Select", "Hide", "Delete" or "Nothing" - or first letter of those words
--    
-- @changelog
--  + init

-- Script generated by Lokasenna's GUI Builder


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()

-- Load lua utilities
local joshnt_LuaUtils = reaper.GetResourcePath()..'/Scripts/Joshnt_ReaScripts/DEVELOPMENT/joshnt_LuaUtilities.lua'
if reaper.file_exists( joshnt_LuaUtils ) then 
  dofile( joshnt_LuaUtils ) 
  if not joshnt or joshnt.version() < 1.0 then 
    reaper.MB("This script requires a newer version of joshnt Lua Utilities. Please run:\n\nExtensions > ReaPack > Synchronize Packages, 'joshnt_LuaUtilities.lua'","Error",0); 
    return 
  end
else 
  reaper.MB("This script requires joshnt Lua Utilities! Please install them here:\n\nExtensions > ReaPack > Browse Packages > 'joshnt Lua Utilities'","Error",0)
  return
end


GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Label.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Textbox.lua")()
GUI.req("Classes/Class - Frame.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end



GUI.name = "joshnt - variation verifier"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 1000, 350
GUI.anchor, GUI.corner = "screen", "C"


-- variables
local textArrayDescription = {
    target = "",
    countWhat = "",
    numItems = "",
    mathCompare = "",
    actionMain = "",
    actionsOther = "",
    print = "",
    printwhat = "",
    printWhere = ""
}
local updateTextArray = true;

local function checkOptionDefaults()
    if reaper.HasExtState("joshnt_VariationVerifier_Interface", "printMatching") then
        -- print default values
        local defaultsTable1 = {}
        local defaultsTable2 = {}
        local defaultsTable3 = {}
        table.insert(defaultsTable1,reaper.GetExtState("joshnt_VariationVerifier_Interface", "printMatching")=="true")
        table.insert(defaultsTable1,reaper.GetExtState("joshnt_VariationVerifier_Interface", "printOther")=="true")
        table.insert(defaultsTable2,reaper.GetExtState("joshnt_VariationVerifier_Interface", "printNames")=="true")
        table.insert(defaultsTable2,reaper.GetExtState("joshnt_VariationVerifier_Interface", "printItemCount")=="true")
        table.insert(defaultsTable3,reaper.GetExtState("joshnt_VariationVerifier_Interface", "printToConsole")=="true")
        table.insert(defaultsTable3,reaper.GetExtState("joshnt_VariationVerifier_Interface", "printToCSV")=="true")
        GUI.Val("print",defaultsTable1)
        GUI.Val("printwhat",defaultsTable2)
        GUI.Val("printWhere",defaultsTable3)

        -- other default values
        GUI.Val("target",tonumber(reaper.GetExtState("joshnt_VariationVerifier_Interface", "target")))
        GUI.Val("countWhat",tonumber(reaper.GetExtState("joshnt_VariationVerifier_Interface", "countWhat")))
        GUI.Val("numItems",tonumber(reaper.GetExtState("joshnt_VariationVerifier_Interface", "numItems")))
        GUI.Val("mathCompare",tonumber(reaper.GetExtState("joshnt_VariationVerifier_Interface", "mathCompare")))
        GUI.Val("actionMain",tonumber(reaper.GetExtState("joshnt_VariationVerifier_Interface", "actionMain")))
        GUI.Val("actionsOther",tonumber(reaper.GetExtState("joshnt_VariationVerifier_Interface", "actionsOther")))
    end
end

local function saveOptions()
    -- print defaults 
    local printBoolTable = GUI.Val("print")
    local printWhatBoolTable = GUI.Val("printwhat")
    local printWhereBoolTable = GUI.Val("printWhere")


    reaper.SetExtState("joshnt_VariationVerifier_Interface", "printMatching", tostring(printBoolTable[1]), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "printOther", tostring(printBoolTable[2]), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "printNames", tostring(printWhatBoolTable[1]), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "printItemCount", tostring(printWhatBoolTable[2]), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "printToConsole", tostring(printWhereBoolTable[1]), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "printToCSV", tostring(printWhereBoolTable[2]), true)

    -- other defaults 
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "target", tostring(GUI.Val("target")), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "countWhat", tostring(GUI.Val("countWhat")), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "numItems", tostring(GUI.Val("numItems")), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "mathCompare", tostring(GUI.Val("mathCompare")), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "actionMain", tostring(GUI.Val("actionMain")), true)
    reaper.SetExtState("joshnt_VariationVerifier_Interface", "actionsOther", tostring(GUI.Val("actionsOther")), true)
end

local function run_VariationVerifier()
    GUI.quit = true
    saveOptions()
end

local function updateDescription()
    local textString;

    local mathCompare_toString = ""
    if textArrayDescription.mathCompare == "=" then 
        mathCompare_toString = "exactly"
    elseif textArrayDescription.mathCompare == "!=" then
        mathCompare_toString = "not"
    elseif textArrayDescription.mathCompare == "<" then
        mathCompare_toString = "less than"
    else 
        mathCompare_toString = "more than"
    end

    local print_toString = ""
    if textArrayDescription.print == "" or textArrayDescription.printwhat == "" or textArrayDescription.printWhere == "" then 
        print_toString = "Don't print anything."
    else
        print_toString = "Print "..textArrayDescription.printwhat.." "..textArrayDescription.print.." to "..textArrayDescription.printWhere.."."
    end
    textString = textArrayDescription.actionMain.." "..textArrayDescription.target.." with "..mathCompare_toString.." "..textArrayDescription.numItems.." "..textArrayDescription.countWhat..". "..textArrayDescription.actionsOther.." others. "..print_toString
    GUI.Val("description",textString)
    reaper.ShowConsoleMsg("\nUpdate description")
end



local function redrawAll()
    GUI.New("Run", "Button", {
        z = 11,
        x = 17.0,
        y = 250.0,
        w = 100,
        h = 30,
        caption = "Execute",
        font = 2,
        col_txt = "txt",
        col_fill = "elm_frame",
        func = run_VariationVerifier
    })

    GUI.New("target", "Radio", {
        z = 11,
        x = 16,
        y = 64,
        w = 120,
        h = 112,
        caption = "What to check",
        optarray = {"All Tracks", "All Regions", "Sel. Tracks", "Sel. Regions"},
        dir = "v",
        font_a = 3,
        font_b = 2,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = false,
        opt_size = 20
    })

    GUI.New("countWhat", "Radio", {
        z = 11,
        x = 452.0,
        y = 64.0,
        w = 200,
        h = 65,
        caption = "What to count",
        optarray = {"Singular media items", "Overlapping item groups"},
        dir = "v",
        font_a = 3,
        font_b = 2,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = false,
        opt_size = 20
    })

    GUI.New("Variation Verifier", "Label", {
        z = 11,
        x = 10,
        y = 10,
        caption = "Variation Verifier",
        font = 1,
        color = "txt",
        bg = "wnd_bg",
        shadow = false
    })

    GUI.New("numItems", "Textbox", {
        z = 11,
        x = 220.0,
        y = 76.0,
        w = 96,
        h = 20,
        caption = "Number of items",
        cap_pos = "top",
        font_a = 3,
        font_b = "monospace",
        color = "txt",
        bg = "wnd_bg",
        shadow = true,
        pad = 4,
        undo_limit = 20
    })

    GUI.New("actionsOther", "Radio", {
        z = 11,
        x = 734.0,
        y = 65.0,
        w = 110,
        h = 135,
        caption = "Action for others",
        optarray = {"Color", "Delete", "Select", "Hide", "Do nothing"},
        dir = "v",
        font_a = 3,
        font_b = 2,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = false,
        opt_size = 20
    })

    GUI.New("description", "Label", {
        z = 11,
        x = 18.0,
        y = 320.0,
        caption = "",
        font = 3,
        color = "txt",
        bg = "wnd_bg",
        shadow = false
    })

    GUI.New("actionMain", "Radio", {
        z = 11,
        x = 330,
        y = 64,
        w = 110,
        h = 135,
        caption = "Action to perform",
        optarray = {"Color", "Delete", "Select", "Hide", "Do nothing"},
        dir = "v",
        font_a = 3,
        font_b = 2,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = false,
        opt_size = 20
    })

    GUI.New("Frame1", "Frame", {
        z = 11,
        x = 689.0,
        y = 60.0,
        w = 2,
        h = 145,
        shadow = false,
        fill = false,
        color = "green",
        bg = "green",
        round = 0,
        text = "",
        txt_indent = 0,
        txt_pad = 0,
        pad = 4,
        font = 4,
        col_txt = "txt"
    })

    GUI.New("mathCompare", "Radio", {
        z = 11,
        x = 147,
        y = 64,
        w = 60,
        h = 112,
        caption = "compare",
        optarray = {"=", "<", ">", "!="},
        dir = "v",
        font_a = 3,
        font_b = 2,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = false,
        opt_size = 20
    })

    GUI.New("print", "Checklist", {
        z = 11,
        x = 150.0,
        y = 236.0,
        w = 120,
        h = 65,
        caption = "Print",
        optarray = {"of matching", "of others"},
        dir = "v",
        pad = 4,
        font_a = 3,
        font_b = 3,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = nil,
        opt_size = 20
    })

    GUI.New("printwhat", "Checklist", {
        z = 11,
        x = 290.0,
        y = 236.0,
        w = 100,
        h = 65,
        caption = "what",
        optarray = {"names", "item count"},
        dir = "v",
        pad = 4,
        font_a = 3,
        font_b = 3,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = nil,
        opt_size = 20
    })

    GUI.New("printWhere", "Checklist", {
        z = 11,
        x = 410.0,
        y = 236.0,
        w = 100,
        h = 65,
        caption = "to",
        optarray = {"console", "CSV-File"},
        dir = "v",
        pad = 4,
        font_a = 3,
        font_b = 3,
        col_txt = "txt",
        col_fill = "elm_fill",
        bg = "wnd_bg",
        frame = true,
        shadow = true,
        swap = nil,
        opt_size = 20
    })

    function GUI.elms.target:onmousedown()
        GUI.Radio.onmousedown(self)
        updateTextArray = true
    end

    function GUI.elms.countWhat:onmousedown()
        GUI.Radio.onmousedown(self)
        updateTextArray = true
    end

    function GUI.elms.mathCompare:onmousedown()
        GUI.Radio.onmousedown(self)
        updateTextArray = true
    end

    function GUI.elms.actionsOther:onmousedown()
        GUI.Radio.onmousedown(self)
        updateTextArray = true
    end

    function GUI.elms.actionMain:onmousedown()
        GUI.Radio.onmousedown(self)
        updateTextArray = true
        
    end

    function GUI.elms.numItems:lostfocus()
        GUI.Textbox.lostfocus(self)
        updateTextArray = true
        
    end

    function GUI.elms.print:onmousedown()
        GUI.Checklist.onmousedown(self)
        updateTextArray = true
    end

    function GUI.elms.printwhat:onmousedown()
        GUI.Checklist.onmousedown(self)
        updateTextArray = true
        
    end

    function GUI.elms.printWhere:onmousedown()
        GUI.Checklist.onmousedown(self)
        updateTextArray = true
    end

end

local function updateTextArrayDescription_Full()
    textArrayDescription = {
        target = GUI.elms.target.optarray[GUI.Val("target")],
        countWhat = GUI.elms.countWhat.optarray[GUI.Val("countWhat")],
        numItems = tostring(GUI.Val("numItems")),
        mathCompare = GUI.elms.mathCompare.optarray[GUI.Val("mathCompare")],
        actionMain = GUI.elms.actionMain.optarray[GUI.Val("actionMain")],
        actionsOther = GUI.elms.actionsOther.optarray[GUI.Val("actionsOther")],
    }



    reaper.ShowConsoleMsg("\nValue of Target: "..GUI.Val("target"))

    local optionTable = GUI.Val("print")
    local tempString = ""
    for index, bool in ipairs(optionTable) do
        if bool == true then
            if tempString ~= "" then
                tempString = tempString.." and "..GUI.elms.print.optarray[index]
            else
                tempString = GUI.elms.print.optarray[index]
            end
        end
    end
    textArrayDescription.print = tempString

    local optionTable = GUI.Val("printwhat")
    local tempString = ""
    for index, bool in ipairs(optionTable) do
        if bool == true then
            if tempString ~= "" then
                tempString = tempString.." and "..GUI.elms.printwhat.optarray[index]
            else
                tempString = GUI.elms.printwhat.optarray[index]
            end
        end
    end
    textArrayDescription.printwhat = tempString

    local optionTable = GUI.Val("printWhere")
    local tempString = ""
    for index, bool in ipairs(optionTable) do
        if bool == true then
            if tempString ~= "" then
                tempString = tempString.." and "..GUI.elms.printWhere.optarray[index]
            else
                tempString = GUI.elms.printWhere.optarray[index]
            end
        end
    end
    textArrayDescription.printWhere = tempString
end

local function Loop()
    if updateTextArray == true then
        updateTextArray = false
        updateTextArrayDescription_Full()
        updateDescription()
    end
end

redrawAll()
GUI.Init()
checkOptionDefaults()
GUI.func = Loop
GUI.freq = 0
GUI.onresize = redrawAll
GUI.exit = saveOptions
GUI.Main()
