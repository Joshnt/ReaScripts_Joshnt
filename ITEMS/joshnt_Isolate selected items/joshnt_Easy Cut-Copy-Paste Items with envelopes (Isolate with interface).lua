-- @noindex
-- Interface generated by Lokasenna's GUI Builder


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()

-- Load lua utilities
local joshnt_LuaUtils = reaper.GetResourcePath()..'/Scripts/Joshnt_ReaScripts/DEVELOPMENT/joshnt_LuaUtilities.lua'
if reaper.file_exists( joshnt_LuaUtils ) then 
  dofile( joshnt_LuaUtils ) 
  if not joshnt or joshnt.version() < 1.0 then 
    reaper.MB("This script requires a newer version of joshnt Lua Utilities. Please run:\n\nExtensions > ReaPack > Synchronize Packages, 'joshnt_LuaUtilities.lua'","Error",0); 
    return 
  end
else 
  reaper.MB("This script requires joshnt Lua Utilities! Please install them here:\n\nExtensions > ReaPack > Browse Packages > 'joshnt Lua Utilities'","Error",0)
  return
end



GUI.req("Classes/Class - Slider.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Label.lua")()
GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Frame.lua")()
-- If any of the requested libraries weren't found, abort the script.
---@diagnostic disable-next-line: undefined-global
if missing_lib then return 0 end



GUI.name = "joshnt_Copy/ Cut with envelopes"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 500, 240
GUI.anchor, GUI.corner = "mouse", "C"

-- variables
local startSelItems, endSelItems;

local function checkOptionDefaults()
    if reaper.HasExtState("joshnt_Easy-ItemCopy_Interface", "ripple_paste") then
        local defaultsTable = {}
        table.insert(defaultsTable,reaper.GetExtState("joshnt_Easy-ItemCopy_Interface", "ripple_paste")=="true")
        table.insert(defaultsTable,reaper.GetExtState("joshnt_Easy-ItemCopy_Interface", "Close_On_Execute")=="true")
        table.insert(defaultsTable,reaper.GetExtState("joshnt_Easy-ItemCopy_Interface", "other_items_TimeSame")=="true")
        GUI.Val("Options",defaultsTable)
    end
end

local function saveOptions()
    local optionsBoolTable = GUI.Val("Options") -- 1 = ripple paste, 2 = exit, 3 = same for other items
    reaper.SetExtState("joshnt_Easy-ItemCopy_Interface", "ripple_paste", tostring(optionsBoolTable[1]), true)
    reaper.SetExtState("joshnt_Easy-ItemCopy_Interface", "Close_On_Execute", tostring(optionsBoolTable[2]), true)
    reaper.SetExtState("joshnt_Easy-ItemCopy_Interface", "other_items_TimeSame", tostring(optionsBoolTable[3]), true)
end

local function cutAndPaste_Pressed()
    local cursorPos = reaper.GetCursorPosition()
    joshnt.isolate_MoveSelectedItems_InsertToInput(GUI.Val("timeBefore"),GUI.Val("timeAfter"),cursorPos, GUI.Val("Options")[1],false)

    if GUI.Val("Options")[2] then
        GUI.quit = true
    end
    saveOptions()
end

local function copyAndPaste_Pressed()
    local cursorPos = reaper.GetCursorPosition()
    joshnt.isolate_MoveSelectedItems_InsertToInput(GUI.Val("timeBefore"),GUI.Val("timeAfter"),cursorPos, GUI.Val("Options")[1],true)

    if GUI.Val("Options")[2] then
        GUI.quit = true
    end
    saveOptions()
end

local function moveOther_Pressed()
    reaper.PreventUIRefresh(1)
    reaper.Undo_BeginBlock()
    if GUI.Val("Options")[3] then
        joshnt.isolate_MoveOtherItems_ToEndOfSelectedItems(GUI.Val("timeBefore"),GUI.Val("timeAfter"),GUI.Val("timeBefore"),GUI.Val("timeAfter"))
    else
        joshnt.isolate_MoveOtherItems_ToEndOfSelectedItems(GUI.Val("timeBefore"),GUI.Val("timeAfter"),0,0)
    end
    reaper.Undo_EndBlock("Move Other items to end of selected items", 0)
    reaper.PreventUIRefresh(-1)

    if GUI.Val("Options")[2] then
        GUI.quit = true
    end
    saveOptions()
end

local function updateTimeSelection()
    reaper.GetSet_LoopTimeRange(true, false, startSelItems+GUI.Val("timeBefore"), endSelItems+GUI.Val("timeAfter"), false)
end

local function Loop()
    startSelItems, endSelItems = joshnt.startAndEndOfSelectedItems()
    updateTimeSelection()
    if reaper.CountSelectedMediaItems(0) > 0 then 

        -- Save a bit of CPU by only doing this if we need to
		if GUI.elms.lbl_noSel.z == 1 then

			GUI.elms.lbl_noSel.z = 5
			GUI.elms_hide[GUI.elms.frm_track.z] = true
            GUI.elms_freeze[GUI.elms.timeBefore.z] = false
            GUI.elms_freeze[GUI.elms.ExecuteCopy.z] = false
            GUI.elms_freeze[GUI.elms.timeAfter.z] = false
            GUI.elms_freeze[GUI.elms.executeCut.z] = false
			
			-- Force a redraw of every layer
			GUI.redraw_z[0] = true
			
		end

    else

        if GUI.elms.lbl_noSel.z == 5 then
                
            GUI.elms.lbl_noSel.z = 1
            GUI.elms_hide[GUI.elms.frm_track.z] = false
            GUI.elms_freeze[GUI.elms.timeBefore.z] = true
            GUI.elms_freeze[GUI.elms.ExecuteCopy.z] = true
            GUI.elms_freeze[GUI.elms.timeAfter.z] = true
            GUI.elms_freeze[GUI.elms.executeCut.z] = true

            GUI.redraw_z[0] = true
            
        end

    end
end

-- Objects
GUI.New("timeBefore", "Slider", {
    z = 11,
    x = 8,
    y = 64,
    w = 300,
    caption = "Time before selected item(s) (sec)",
    min = -10,
    max = 0,
    defaults = {100},
    inc = 0.1,
    dir = "h",
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    show_handles = true,
    show_values = true,
    cap_x = 0,
    cap_y = 0
})

GUI.New("Easy Cut/ Copy with envelopes (Interface)", "Label", {
    z = 11,
    x = 0,
    y = 0,
    caption = "Easy Cut/ Copy with envelopes (Interface)",
    font = 2,
    color = "txt",
    bg = "wnd_bg",
    shadow = false
})

GUI.New("ExecuteCopy", "Button", {
    z = 11,
    x = 336,
    y = 56,
    w = 150,
    h = 24,
    caption = "Copy & Paste to Cursor",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = copyAndPaste_Pressed
})

GUI.New("lbl_noSel", "Label",	1,	180, 110, "No item(s) selected!", true, 2, "red")
GUI.New("frm_track", "Frame",	2,	0, 20, 500, 300, false, true, "faded", 0)

GUI.New("timeAfter", "Slider", {
    z = 11,
    x = 8,
    y = 120,
    w = 300,
    caption = "Time after selected item(s) (sec)",
    min = 0,
    max = 10,
    defaults = {0},
    inc = 0.1,
    dir = "h",
    font_a = 3,
    font_b = 4,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    show_handles = true,
    show_values = true,
    cap_x = 0,
    cap_y = 0
})

GUI.New("executeCut", "Button", {
    z = 11,
    x = 336,
    y = 112,
    w = 150,
    h = 24,
    caption = "Cut & Paste to Cursor",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = cutAndPaste_Pressed
})

GUI.New("moveOther", "Button", {
    z = 11,
    x = 336,
    y = 168,
    w = 150,
    h = 24,
    caption = "Move other items",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = moveOther_Pressed
})

GUI.New("Options", "Checklist", {
    z = 11,
    x = 8,
    y = 160,
    w = 220,
    h = 80,
    caption = "",
    optarray = {"Ripple Paste", "close after execution", "use same times for other items"},
    dir = "v",
    pad = 4,
    font_a = 2,
    font_b = 3,
    col_txt = "txt",
    col_fill = "elm_fill",
    bg = "wnd_bg",
    frame = true,
    shadow = true,
    swap = false,
    opt_size = 20
})

-- Layer 5 will never be shown or updated
-- (See the Main function below)
GUI.elms_hide[5] = true
GUI.Val("Options", {true})

function GUI.elms.timeBefore:onmousedown()
	GUI.Slider.onmousedown(self)
	updateTimeSelection()
end
function GUI.elms.timeBefore:ondrag()
	GUI.Slider.ondrag(self)
	updateTimeSelection()
end
function GUI.elms.timeBefore:ondoubleclick()
	GUI.Slider.ondrag(self)
	updateTimeSelection()
end
function GUI.elms.timeAfter:onmousedown()
	GUI.Slider.onmousedown(self)
	updateTimeSelection()
end
function GUI.elms.timeAfter:ondrag()
	GUI.Slider.ondrag(self)
	updateTimeSelection()
end
function GUI.elms.timeAfter:ondoubleclick()
	GUI.Slider.ondrag(self)
	updateTimeSelection()
end



GUI.Init()
checkOptionDefaults()
GUI.func = Loop
GUI.freq = 0
GUI.exit = saveOptions
GUI.Main()
